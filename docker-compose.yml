services:
  web:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    env_file: .env
    environment:
      - TZ=${TZ}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
      - kafka-network

  db:
    image: postgres:13-alpine
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TZ}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      TZ: ${TZ}
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - app-network

  redis:
    image: redis:6-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - app-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=${REDIS_COMMANDER_HOSTS}
      - TZ=${TZ}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - app-network

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    environment:
      - TZ=${TZ}
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - app-network
  
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka_broker
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    environment:
      KAFKA_CFG_NODE_ID: ${KAFKA_CFG_NODE_ID}
      KAFKA_CFG_PROCESS_ROLES: ${KAFKA_CFG_PROCESS_ROLES}
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CFG_CONTROLLER_QUORUM_VOTERS}
      KAFKA_CFG_LISTENERS: ${KAFKA_CFG_LISTENERS}
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: ${KAFKA_CFG_CONTROLLER_LISTENER_NAMES}
      KAFKA_CFG_ADVERTISED_LISTENERS: ${KAFKA_CFG_ADVERTISED_LISTENERS}
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE}
    healthcheck: 
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 15s
      timeout: 10s
      retries: 10
    networks:
      - kafka-network

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: kafka_ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_BROKERS: ${REDPANDA_KAFKA_BROKERS}
    depends_on:
      kafka: 
        condition: service_healthy
    networks:
      - kafka-network

volumes:
  postgres_data:
  redis_data:
  kafka_data:

networks:
  app-network:
    driver: bridge
  kafka-network:
    driver: bridge